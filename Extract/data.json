{"data": {"python": { "for loop":  "mylist = [1, 2, 3] \n for i in mylist: \n print(i)", 
                      "while loop": "while (True): \n stuff() \n if fail_condition: \n break", 
                      "nested loop": "while(True): \n stuff() \n for i in myList: \n stuff()", 
                      "do while loop": "while not fail_condition:", 
                      "break statements": "import random \n def get_num(): \n return random.randrange (999,9999) \n def get_user_input(): \n user_input = int(input()) \n return user_input \n while True: \n comp_num = get_num() \n print(\"The computer gave: {}\".format(comp_num)) \n print(\"Your turn:\") \n user_num = get_user_input() \n if user_num == comp_num: \n print(\"Done it!\") \n break \n else:....", 
                      "open file": "import os \n if not os.path.exists(directory)>", 
                      "read file": "with open(fname) as f: \n content = f.readlines()", 
                      "write to file": "f.write(name)", 
                      "append file": "with open(\"test.txt\", \"a\") as myfile: \n myfile.write(\"appended text\")", 
                      "close file": "f = open('test.txt','r') \n buf = f.readlines() \n f.close()", 
                      "length of string": "len(my_string)", 
                      "reverse a string": "'hello world'[::-1] \n 'dlrow olleh'", 
                      "split a string": "import shlex \n shlex.split('this is \"a test\"') \n ['this', 'is', 'a test']", 
                      "remove item from list": "if '*NoCover*' in dc_files: \n dc_files.remove('*NoCover*')", 
                      "string to float": "a = '5452222' \n float(a) \n 545.22220000000004 \n int(float(a))\n 545", 
                      "string to integer": "a = '5452222' \n float(a) \n 545.22220000000004 \n int(float(a)) \n 545",
                      "string to signed integer": "def signed_int(h): \n x = int(h, 16) \n if x > 0x7FFFFFFFFFFFFFFF: \n x -= 0x10000000000000000 \n return x \n print(signed_int('0xb69958096aff3148'))", 
                      "return largest element in list": "def get_most_ooo_word(lines): \n k = -1 \n most_o = [] \n for line in lines: \n phrase_words = line.split() \n for word in phrase_words: \n c = word.count('o') \n if c &gt; k: \n k = c \n most_o = [word] \n elif c == k: \n most_o.append(word) \n return most_o \n print(get_most_ooo_word(['aa ao ooo'])) \n print(get_most_ooo_word(['aa ao oa    aaaooo aooqq aoooq'])) \n print(get_most_ooo_word(['aa ao ooo', 'aa ao oa aaaooo aooqq aoooq']))", 
                      "reverse a list": "array=[0,10,20,40] \n for i in reversed(array): \n ... print(i)", 
                      "print output": "import sys \n sys.stdout.write('.')", 
                      "write to console": "from subprocess import Popen, PIPE \n p = Popen(\"c:\\users\\user\\downloads\\Application\", stdin=PIPE) \n p.communicate(\"000\") \n p.communicate(\"#\\n\")", 
                      "initialize array": "bar = [] \n for item in some_iterable: \n bar.append(SOME EXPRESSION)", 
                      "print shortest path": "def print_route(graph, x, y): \n r = route(graph, x, y) \n prmpt = ['({})'.format(x)] \n for y in r[1:]: \n d = graph.distances.get((x, y)) \n prmpt.append(' --{}-&gt; ({})'.format(d,y)) \n x = y \n print(''.join(prmpt))", 
                      "resize array": "SCALE_MULTIPLE = 2  # or any positive integer \n new_array = [] \n for orig_row in original: \n new_row = [] \n for orig_elem in orig_row: \n new_row.extend([orig_elem] * SCALE_MULTIPLE) \n new_array.extend(new_row[:] for _ in range(SCALE_MULTIPLE))"}}, 
                     
                "c++": {
                    "for loop": "for(initializationStatement; testExpression; updateStatement) { //your code }", 
                    "while loop": "while (testExpression) { //your code }", 
                    "nested loop": "for ( init; condition; increment ) {for ( init; condition; increment ) {statement(s);} statement(s); // add additional statements, if any}", 
                    "do while loop": "do {statement(s);} while( condition );",
                    "break statements": "// initialization expression int i = 1; // while loop (goes to infinite) while (1) { if (i > 10) break; cout << i; i++; }",
                    "continue statement": "int a = 10; do { if( a == 15) { a = a + 1; continue; } cout << a << endl; a = a + 1; }  while( a < 20 );",
                    "goto statement": "goto label; ... label: statement;", 
                    "open file": "outfile.open(file_name_as_a_string);", 
                    "length of string": "{cout << string_name.size(); }", 
                    "reverse a string": "void reverse(string str) { for (int i=str.length()-1; i>=0; i--) cout << str[i]; } ", 
                    "split a string": "string token = s.substr(0, s.find(delimiter));", 
                    "remove item from list": "mylist.remove(value_of_item);", 
                    "string to float": "stof(str);", 
                    "string to integer": "stoi(string)", 
                    "return largest element in list": "cout << max_element(mybegin(cloud), myend(cloud))", 
                    "reverse a list": "mylist.reverse();", 
                    "prompt user for input": "int in_from_user; cin >> in_from_user;", 
                    "print output": "cout << output;",  
                    "initialize array": "int arrayOf6 [5] = { }; ", 
                    "print shortest path": "void printPath(int parent[], int j) { if (parent[j]==-1) return; printPath(parent, parent[j]);}", 
                    "resize array": "int size = 10; int* arr = new int[size]; void resize() { size_t newSize = size * 2; int* newArr = new int[newSize]; memcpy( newArr, arr, size * sizeof(int) ); size = newSize; delete [] arr; arr = newArr;}"},

                "javascript": {
                    "closure inside loops": "for (let i = 0; i < 3; i++) { funcs[i] = function() { console.log(\"My value: \" + i); }; }", 
                    "get query string": "var queryString = location.search;", 
                    "this keyword": "function myFunction() { return this; }",
                    "upload files": "var formidable = require('formidable');", 
                    "pass variable": "function functionName(parameter1, parameter2, parameter3) { // your code }", 
                    "redirect to webpage": "window.location.href = \"webpageURL\";", 
                    "validate email": "function emailIsValid (email) { return /\\S+@\\S+\\.\\S+/.test(email) }", 
                    "randomize an array": "for (var i = ar.length-1; i > 0; i--) { ar j = Math.floor(Math.random()*(i + 1)); var temp = ar[i]; ar[i] = ar[j]; ar[j] = temp;}}", 
                    "replace all occurrences of a string": "var target = this; return target.replace(new RegExp(search, 'g'), replacement);", 
                    "copy to clipboard": "document.execCommand(\"copy\");", 
                    "clone an object": "const source = {a:1, b:2, c:3}; const target = jsonCopy(source); console.log(target);", 
                    "compare two dates": "var d1 = new Date(2019, 0, 1); var d2 = new Date(2019, 0, 2); d1 <  d2; // true d1 <= d2; // true d1 >  d2; // false d1 >= d2;", 
                    "sorting an array": "array.sort(function(a, b){return a - b})"}
}