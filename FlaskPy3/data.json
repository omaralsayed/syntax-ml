{"data": {"python": {"for loop":  ["for i in range(0, 3):", "    print(i)", "    >>> 0", "    >>> 1", "   >>> 2"], 
  "while loop": ["while True:", "#your code"], 
  "nested loop": ["while True:", "    for i in myList:", "        print(i)"], 
  "do while loop": ["while not fail_condition:", "    # your code"],  
  "break statements": ["while(True):", "    break"],
  "open file": ["f = open(\"myfile.txt\")"], 
  "read file": ["with open(fname) as f:", "content = f.readlines()"], 
  "write to file": ["with open(\"test.txt\", \"w\") as myfile:", "    myfile.write(\"bar\")"], 
  "append file": ["with open(\"test.txt\", \"a\") as myfile:", "myfile.write(\"appended text\")"], 
  "close file": ["f = open('test.txt','r')", "f.close()"], 
  "length of string": ["len(\"hello there\")"], 
  "reverse a string": ["'hello world'[::-1]", ">>> 'dlrow olleh'"], 
  "split a string": ["\"This is my story\".split(' ')", ">>> ['This', 'is', 'my', 'story']"], 
  "remove item from list": ["numbers = [0,2,4,5]", "numbers.remove(2)", ">>> [0,4,5]"], 
  "string to float": ["a = '545.22'", "float(a)", ">>> 545.22"], 
  "string to integer": ["a = '545'", "int(a)", ">>> 545"],
  "string to signed integer": ["def signed_int(h):", "    x = int(h, 16)", "    if x > 0x7FFFFFFFFFFFFFFF:", "        x -= 0x10000000000000000", "return x", "print(signed_int('0xb69958096aff3148'))"], 
  "return largest element in list": ["max(mylist)"], 
  "reverse a list": ["array=[0,10,20,40]", "for i in reversed(array):"], 
  "print output": ["import sys", "sys.stdout.write('.') or print(my_output)"], 
  "write to console": ["print(message)"], 
  "initialize array": ["bar = []"],  
  "resize array": ["SCALE_MULTIPLE = 2  # or any positive integer", "new_array = []", "for orig_row in original:", "new_row = []", "for orig_elem in orig_row:\\nnew_row.extend([orig_elem] * SCALE_MULTIPLE)\\nnew_array.extend(new_row[:] for _ in range(SCALE_MULTIPLE))"]}, 
"c++": {
  "for loop": ["for(initializationStatement; testExpression; updateStatement)", "{ //your code }"], 
  "while loop": ["while (testExpression)", "{ //your code }"], 
  "nested loop": ["for ( init; condition; increment ) {","for ( init; condition; increment )", "{statement(s);}", "statement(s); // add additional statements}"], 
  "do while loop": ["do {statement(s);}","while( condition );"],
  "break statements": ["int i = 1; // while loop (goes to infinite)", "while (1) { ", "if (i > 10)", "break;", "cout << i; i++; }"],
  "continue statement": ["int a = 10;", "do {" ,"if( a == 15) {","a = a + 1;", "continue; }", "cout << a << endl;", "a = a + 1; }"],
  "goto statement": ["goto label;","... label: statement;"], 
  "open file": ["outfile.open(file_name_as_a_string);"], 
  "length of string": ["{cout << string_name.size(); }"], 
  "reverse a string": ["void reverse(string str)", "{ for (int i=str.length()-1; i>=0; i--)", "cout << str[i]; }"], 
  "split a string": ["string token = s.substr(0, s.find(delimiter));"], 
  "remove from list": ["mylist.remove(value_of_item);"], 
  "string to float": ["stof(str);"], 
  "string to integer": ["stoi(string)"], 
  "return largest element in list": ["cout << max_element(mybegin(cloud), myend(cloud))"], 
  "reverse a list": ["mylist.reverse();"], 
  "prompt user for input": ["int in_from_user;", "cin >> in_from_user;"], 
  "print output": ["cout << output;"],  
  "initialize array": ["int arrayOf6 [5] = { }; "], 
  "print shortest path": ["void printPath(int parent[], int j)" ,"{ if (parent[j]==-1) return; printPath(parent, parent[j]);}"], 
  "resize array": ["int size = 10;" ,"int* arr = new int[size];" ,"void resize() {" ,"size_t newSize = size * 2;", "int* newArr = new int[newSize];" ,"memcpy( newArr, arr, size * sizeof(int) );" ,"size = newSize;" ,"delete [] arr;", "arr = newArr;}"]},
"javascript": {
    "closure inside loops": ["for (let i = 0; i < 3; i++) {", "    funcs[i] = function() {", "    console.log(\"My value: \" + i);" ,"    };", "}"], 
    "get query string": ["var queryString = location.search;"], 
    "this keyword": ["function myFunction() {", "    return this;","}"],
    "upload files": ["var formidable = require('formidable');"], 
    "pass variable": ["function functionName(parameter1, parameter2, parameter3) {", "    // your code", "}"], 
    "redirect to webpage": ["window.location.href = \"webpageURL\";"], 
    "validate email": ["function emailIsValid (email) { ","    return /\\S+@\\S+\\.\\S+/.test(email)", "}"], 
    "randomize an array": ["for (var i = ar.length-1; i > 0; i--) {", "    ar j = Math.floor(Math.random()*(i + 1));", "    var temp = ar[i];", " ar[i] = ar[j];", "    ar[j] = temp;", "}"], 
    "replace all occurrences of a string": ["var target = this;",  "return target.replace(new RegExp(search, 'g'), replacement);"], 
    "copy to clipboard": ["document.execCommand(\"copy\");"], 
    "clone an object": ["const source = {a:1, b:2, c:3};", "const target = jsonCopy(source);", "console.log(target);"], 
    "compare two dates": ["var d1 = new Date(2019, 0, 1);", "var d2 = new Date(2019, 0, 2);", "d1 <  d2;", "// true d1 <= d2;", "// true d1 >  d2;", "// false d1 >= d2;"], 
    "sorting an array": ["array.sort(function(a, b)","{return a - b})"]}
}}

